package org.pgstyle.rst2.random;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

import org.pgstyle.rst2.security.RandomInputStream;
import org.pgstyle.rst2.security.Randomiser;
import org.pgstyle.rst2.security.SecureRandomInputStream;

/**
 * The {@code Base64Randomiser} generates strings with randomised bytes encoded
 * in the Base64 encoding.
 *
 * @since rst-2
 * @version rst-2.0
 * @author PGKan
 */
public final class Base64Randomiser extends Randomiser {

    private static final Base64.Encoder ENCODER = Base64.getEncoder();
    private static final Base64.Encoder URL_ENCODER = Base64.getUrlEncoder();

    /**
     * Creates an instance of {@code Base64Randomiser} with a random seed
     * automatically generated by the {@code pglj/rst2} library.
     *
     * @return an instance of {@code Base64Randomiser}
     */
    public static Base64Randomiser getInstance() {
        return Base64Randomiser.getInstance(RandomUtils.randomLongSeed());
    }

    /**
     * Creates an instance of {@code Base64Randomiser} with a given seed.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code Base64Randomiser}
     */
    public static Base64Randomiser getInstance(long seed) {
        return new Base64Randomiser(new RandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code Base64Randomiser} with a given seed. The
     * seed will ultimately be casted into {@code long} for seeding the
     * randomiser by using the methods {@link RandomUtils#toLongSeed(String)}.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code Base64Randomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static Base64Randomiser getInstance(String seed) {
        return Base64Randomiser.getInstance(RandomUtils.toLongSeed(seed));
    }

    /**
     * Creates a secured instance of {@code Base64Randomiser} with a random seed
     * automatically generated by the {@code pglj/rst2} library.
     *
     * @return an instance of {@code Base64Randomiser}
     */
    public static Base64Randomiser getInstanceSecure() {
        return Base64Randomiser.getInstanceSecure(RandomUtils.randomBytesSeed());
    }

    /**
     * Creates an instance of {@code Base64Randomiser} with a given seed.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code Base64Randomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static Base64Randomiser getInstanceSecure(byte[] seed) {
        return new Base64Randomiser(new SecureRandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code Base64Randomiser} with a given seed. The
     * seed will ultimately be casted into {@code byte[]} for seeding the
     * randomiser by using the methods {@link RandomUtils#toBytesSeed(long)}.
     *
     * @deprecated This method is marked as deprecated because a long seed could
     *             not utilise the full seeding method of a secured instance of
     *             randomiser. Consider to use
     *             {@link #getInstanceSecure(String)} instead.
     * @param seed the seed for the randomiser
     * @return an instance of {@code Base64Randomiser}
     */
    @Deprecated
    public static Base64Randomiser getInstanceSecure(long seed) {
        return Base64Randomiser.getInstanceSecure(RandomUtils.toBytesSeed(seed));
    }

    /**
     * Creates an instance of {@code Base64Randomiser} with a given seed. The
     * seed will ultimately be casted into {@code byte[]} for seeding the
     * randomiser by using the methods {@link RandomUtils#toBytesSeed(String)}.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code Base64Randomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static Base64Randomiser getInstanceSecure(String seed) {
        return Base64Randomiser.getInstanceSecure(RandomUtils.toBytesSeed(seed));
    }

    /**
     * Initialises the randomiser with a given random input stream.
     *
     * @param randomStream the random stream for generating data
     * @throws NullPointerException
     *         if the argument {@code randomStream} is {@code null}
     */
    public Base64Randomiser(RandomInputStream randomStream) {
        super(randomStream);
    }

    /**
     * <p>
     * Generates a byte encoded string with {@code length} amount of bytes.
     * </p>
     * <p>
     * This method is implemented as follow:
     * </p>
     * <code>
     * return this.generateUrlString(length).getBytes(StandardCharsets.UTF_8);
     * </code>
     *
     * @param length the length of the generated string
     * @return the bytes representation of the generated string
     */
    @Override
    public byte[] generate(int length) {
        return this.generateUrlString(length).getBytes(StandardCharsets.UTF_8);
    }

    /**
     * Generates a base 64 encoded string with {@code length} amount of random
     * bytes.
     *
     * @param length the length of the generated string
     * @return the generated string
     */
    public String generateString(int length) {
        return Base64Randomiser.ENCODER.encodeToString(super.generate(length));
    }

    /**
     * Generates a base 64 URL encoded string with {@code length} amount of
     * random bytes.
     *
     * @param length the length of the generated string
     * @return the generated string
     */
    public String generateUrlString(int length) {
        return Base64Randomiser.URL_ENCODER.encodeToString(super.generate(length));
    }

    @Override
    public String toString() {
        return "rst/Base64Randomiser:" + this.getRandomStream();
    }

}
