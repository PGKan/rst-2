package org.pgstyle.rst2.random;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

import org.pgstyle.rst2.security.RandomInputStream;
import org.pgstyle.rst2.security.Randomiser;
import org.pgstyle.rst2.security.SecureRandomInputStream;

/**
 * <p>
 * The {@code AlphanumericRandomiser} generates strings with randomised
 * character of latin alphabet and numerical digit.
 * </p>
 * <p>
 * The ratio of alphabet and numerical digit can be controlled with the
 * {@code ratio} argument in the {@code getInstance} methods. The ratio should
 * lie between 0 to 1. And the default ratio is {@code 10 / 36}, thus having
 * equal chance to generate any character.
 * </p>
 * <p>
 * Refactor of the {@code org.pgs.rst.tool.Randomizer} class.
 * </p>
 *
 * @since rst-1
 * @version rst-2.0
 * @author PGKan
 */
public final class AlphanumericRandomiser extends Randomiser {

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with default ratio
     * of numerical digit and a random seed automatically generated by the
     * {@code pglj/rst2} library.
     *
     * @return an instance of {@code AlphanumericRandomiser}
     */
    public static AlphanumericRandomiser getInstance() {
        return AlphanumericRandomiser.getInstance(RandomUtils.randomLongSeed());
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and a random seed automatically generated by the
     * {@code pglj/rst2} library.
     *
     * @param ratio the ratio of numerical digits
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     */
    public static AlphanumericRandomiser getInstance(double ratio) {
        return AlphanumericRandomiser.getInstance(ratio, RandomUtils.randomLongSeed());
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and seed.
     *
     * @param ratio the ratio of numerical digits
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     */
    public static AlphanumericRandomiser getInstance(double ratio, long seed) {
        return new AlphanumericRandomiser(ratio, new RandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and seed. The seed will ultimately be casted into
     * {@code long} for seeding the randomiser by using the methods
     * {@link RandomUtils#toLongSeed(String)}.
     *
     * @param ratio the ratio of numerical digits
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstance(double ratio, String seed) {
        return AlphanumericRandomiser.getInstance(ratio, RandomUtils.toLongSeed(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given seed
     * and the default ratio of numerical digit.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     */
    public static AlphanumericRandomiser getInstance(long seed) {
        return new AlphanumericRandomiser(new RandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given seed
     * and the default ratio of numerical digit. The seed will ultimately be
     * casted into {@code long} for seeding the randomiser by using the methods
     * {@link RandomUtils#toLongSeed(String)}.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstance(String seed) {
        return AlphanumericRandomiser.getInstance(RandomUtils.toLongSeed(seed));
    }

    /**
     * Creates a secured instance of {@code AlphanumericRandomiser} with default
     * ratio of numerical digit and a random seed automatically generated by the
     * {@code pglj/rst2} library.
     *
     * @return an instance of {@code AlphanumericRandomiser}
     */
    public static AlphanumericRandomiser getInstanceSecure() {
        return AlphanumericRandomiser.getInstanceSecure(RandomUtils.randomBytesSeed());
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given seed
     * and the default ratio of numerical digit.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstanceSecure(byte[] seed) {
        return new AlphanumericRandomiser(new SecureRandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and a random seed automatically generated by the
     * {@code pglj/rst2} library.
     *
     * @param ratio the ratio of numerical digits
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     */
    public static AlphanumericRandomiser getInstanceSecure(double ratio) {
        return AlphanumericRandomiser.getInstanceSecure(ratio, RandomUtils.randomBytesSeed());
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and seed.
     *
     * @param ratio the ratio of numerical digits
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstanceSecure(double ratio, byte[] seed) {
        return new AlphanumericRandomiser(ratio, new SecureRandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and seed. The seed will ultimately be casted into
     * {@code byte[]} for seeding the randomiser by using the methods
     * {@link RandomUtils#toBytesSeed(long)}.
     *
     * @deprecated This method is marked as deprecated because a long seed could
     *             not utilise the full seeding method of a secured instance of
     *             randomiser. Consider to use
     *             {@link #getInstanceSecure(String)} instead.
     * @param ratio the ratio of numerical digits
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     */
    @Deprecated
    public static AlphanumericRandomiser getInstanceSecure(double ratio, long seed) {
        return AlphanumericRandomiser.getInstanceSecure(ratio, RandomUtils.toBytesSeed(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given ratio
     * of numerical digit and seed. The seed will ultimately be casted into
     * {@code byte[]} for seeding the randomiser by using the methods
     * {@link RandomUtils#toBytesSeed(String)}.
     *
     * @param ratio the ratio of numerical digits
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstanceSecure(double ratio, String seed) {
        return AlphanumericRandomiser.getInstanceSecure(ratio, RandomUtils.toBytesSeed(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given seed
     * and the default ratio of numerical digit. The seed will ultimately be
     * casted into {@code byte[]} for seeding the randomiser by using the
     * methods {@link RandomUtils#toBytesSeed(long)}.
     *
     * @deprecated This method is marked as deprecated because a long seed could
     *             not utilise the full seeding method of a secured instance of
     *             randomiser. Consider to use
     *             {@link #getInstanceSecure(String)} instead.
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     */
    @Deprecated
    public static AlphanumericRandomiser getInstanceSecure(long seed) {
        return AlphanumericRandomiser.getInstanceSecure(RandomUtils.toBytesSeed(seed));
    }

    /**
     * Creates an instance of {@code AlphanumericRandomiser} with a given seed
     * and the default ratio of numerical digit. The seed will ultimately be
     * casted into {@code byte[]} for seeding the randomiser by using the
     * methods {@link RandomUtils#toBytesSeed(String)}.
     *
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws NullPointerException
     *         if the argument {@code seed} is {@code null}
     */
    public static AlphanumericRandomiser getInstanceSecure(String seed) {
        return AlphanumericRandomiser.getInstanceSecure(RandomUtils.toBytesSeed(seed));
    }

    /**
     * Initialises the randomiser with a given random input stream.
     *
     * @param randomStream the random stream for generating data
     * @throws NullPointerException
     *         if the argument {@code randomStream} is {@code null}
     */
    public AlphanumericRandomiser(RandomInputStream randomStream) {
        this(10.0 / 36, randomStream);
    }

    /**
     * Initialises the randomiser with a given random input stream and ratio of
     * numerical digits.
     *
     * @param ratio the ratio of numerical digits
     * @param randomStream the random stream for generating data
     * @throws IllegalArgumentException
     *         if the ratio exceeds {@code 1} or negative
     * @throws NullPointerException
     *         if the argument {@code randomStream} is {@code null}
     */
    public AlphanumericRandomiser(double ratio, RandomInputStream randomStream) {
        super(randomStream);
        if (ratio < 0 || ratio > 1) {
            throw new IllegalArgumentException("ratio out of bound: " + ratio);
        }
        this.ratio = ratio;
    }

    private final double ratio;

    @Override
    public boolean equals(Object object) {
        return super.equals(object);
    }

    @Override
    public int hashCode() {
        return super.hashCode() ^ Double.hashCode(ratio);
    }

    /**
     * <p>
     * Generates a byte encoded string with {@code length} amount of
     * alphanumeric characters.
     * </p>
     * <p>
     * This method is implemented as follow:
     * </p>
     * <code>
     * return this.generateString(length).getBytes(StandardCharsets.UTF_8);
     * </code>
     *
     * @param length the length of the generated string
     * @return the bytes representation of the generated string
     */
    @Override
    public byte[] generate(int length) {
        return this.generateString(length).getBytes(StandardCharsets.UTF_8);
    }

    /**
     * Generates a string with {@code length} amount of alphanumeric characters.
     *
     * @param length the length of the generated string
     * @return the generated string
     */
    public String generateString(int length) {
        StringBuilder string = new StringBuilder();
        for (int i = 0; i < length; i++) {
            double pointer = this.getPointer();
            if (pointer < this.ratio) {
                string.append(this.getNumeric(pointer));
            }
            else {
                string.append(this.getAlphabet(pointer));
            }
        }
        return string.toString();
    }

    private int getNumeric(double pointer) {
        return (int) StrictMath.floor((pointer / this.ratio) * 10);
    }

    private char getAlphabet(double pointer) {
        return (char) StrictMath.floor((pointer - this.ratio) / (1.0 - this.ratio) * 26 + 'a');
    }

    private float getPointer() {
        return (ByteBuffer.wrap(super.generate(4)).getInt() >>> 8) / (float) (1 << 24);
    }

    @Override
    public String toString() {
        return String.format("rst/AlphanumericRandomiser:%s$%s", Double.toString(this.ratio), this.getRandomStream());
    }

}
