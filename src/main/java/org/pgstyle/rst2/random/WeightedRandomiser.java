package org.pgstyle.rst2.random;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import org.pgstyle.rst2.security.RandomInputStream;
import org.pgstyle.rst2.security.Randomiser;
import org.pgstyle.rst2.security.SecureRandomInputStream;

/**
 * <p>
 * The {@code WeightedRandomiser} can generate strings with customisable
 * characters. The characters to be generated and the probability of them is
 * controlled by a weight map, see the document on the {@link #getInstance(Map)}
 * methods to find more information about the weight map.
 * </p>
 *
 * @since rst-2
 * @version rst-2.0
 * @author PGKan
 */
public final class WeightedRandomiser extends Randomiser {

    /**
     * <p>
     * Creates an instance of {@code WeightedRandomiser} with a given weight map
     * and a random seed automatically generated by the {@code pglj/rst2}
     * library.
     * </p>
     * <p>
     * In the argument {@code weights}, the keys and values of the weight map
     * will determine the probability of character being generated and the
     * character base to choose from. The keys in the weight map are a
     * collection of characters usable by the randomising algorithm; and the
     * values of each keys control the chance of those characters being chosen
     * by the randomising algorithm. The same character can be stated multiple
     * times in the weight map.
     * </p>
     * <p>
     * For example,<br>
     * <code>
     * WeightedRandomiser.getInstance("0123456789", 1);
     * </code><br>
     * creates a weighted randomiser with total weight of 10 and an even
     * probability to generate any character from 0 to 9.
     * </p>
     *
     * @param weights the weight map
     * @return an instance of {@code WeightedRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} is {@code null}
     */
    public static WeightedRandomiser getInstance(Map<String, Integer> weights) {
        return WeightedRandomiser.getInstance(weights, RandomUtils.randomLongSeed());
    }

    /**
     * Creates an instance of {@code WeightedRandomiser} with a given weight map
     * and seed. See the document on the {@link #getInstance(Map)} methods to
     * find more information about the weight map.
     *
     * @param weights the weight map
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} is {@code null}
     * @see #getInstance(Map)
     */
    public static WeightedRandomiser getInstance(Map<String, Integer> weights, long seed) {
        return new WeightedRandomiser(weights, new RandomInputStream(seed));
    }

    /**
     * Creates an instance of {@code WeightedRandomiser} with a given weight map
     * and seed. See the document on the {@link #getInstance(Map)} methods to
     * find more information about the weight map. The seed will ultimately be
     * casted into {@code long} for seeding the randomiser by using the methods
     * {@link RandomUtils#toLongSeed(String)}.
     *
     * @param weights the weight map
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} or {@code seed} is {@code null}
     * @see #getInstance(Map)
     */
    public static WeightedRandomiser getInstance(Map<String, Integer> weights, String seed) {
        return WeightedRandomiser.getInstance(weights, RandomUtils.toLongSeed(seed));
    }

    /**
     * Creates a secured instance of {@code WeightedRandomiser} with a given
     * weight map and a random seed automatically generated by the
     * {@code pglj/rst2} library. See the document on the
     * {@link #getInstance(Map)} methods to find more information about the
     * weight map.
     *
     * @param weights the weight map
     * @return an instance of {@code WeightedRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} is {@code null}
     * @see #getInstance(Map)
     */
    public static WeightedRandomiser getInstanceSecure(Map<String, Integer> weights) {
        return WeightedRandomiser.getInstanceSecure(weights, RandomUtils.randomBytesSeed());
    }

    /**
     * Creates a secured instance of {@code WeightedRandomiser} with a given
     * weight map and seed. See the document on the {@link #getInstance(Map)}
     * methods to find more information about the weight map.
     *
     * @param weights the weight map
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} or {@code seed} is {@code null}
     * @see #getInstance(Map)
     */
    public static WeightedRandomiser getInstanceSecure(Map<String, Integer> weights, byte[] seed) {
        return new WeightedRandomiser(weights, new SecureRandomInputStream(seed));
    }

    /**
     * Creates a secured instance of {@code WeightedRandomiser} with a given
     * weight map and seed. See the document on the {@link #getInstance(Map)}
     * methods to find more information about the weight map. The seed will
     * ultimately be casted into {@code byte[]} for seeding the randomiser by
     * using the methods {@link RandomUtils#toBytesSeed(long)}.
     *
     * @deprecated This method is marked as deprecated because a long seed could
     *             not utilise the full seeding method of a secured instance of
     *             randomiser. Consider to use
     *             {@link #getInstanceSecure(Map, String)} instead.
     * @param weights the weight map
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} is {@code null}
     * @see #getInstance(Map)
     */
    @Deprecated
    public static WeightedRandomiser getInstanceSecure(Map<String, Integer> weights, long seed) {
        return WeightedRandomiser.getInstanceSecure(weights, RandomUtils.toBytesSeed(seed));
    }

    /**
     * Creates a secured instance of {@code WeightedRandomiser} with a given
     * weight map and seed. See the document on the {@link #getInstance(Map)}
     * methods to find more information about the weight map. The seed will
     * ultimately be casted into {@code byte[]} for seeding the randomiser by
     * using the methods {@link RandomUtils#toBytesSeed(String)}.
     *
     * @param weights the weight map
     * @param seed the seed for the randomiser
     * @return an instance of {@code AlphanumericRandomiser}
     * @throws IllegalArgumentException
     *         if the argument {@code weights} is empty; or the total
     *         accumulated weight exceeds the maximum integer
     * @throws NullPointerException
     *         if the argument {@code weights} or {@code seed} is {@code null}
     * @see #getInstance(Map)
     */
    public static WeightedRandomiser getInstanceSecure(Map<String, Integer> weights, String seed) {
        return WeightedRandomiser.getInstanceSecure(weights, RandomUtils.toBytesSeed(seed));
    }

    private static Map<Integer, Character> compile(Map<String, Integer> weights) {
        Objects.requireNonNull(weights, "weights == null");
        if (weights.isEmpty()) {
            throw new IllegalArgumentException("empty weight");
        }
        Map<Integer, Character> compiled = new LinkedHashMap<>();
        int current = 0;
        for (Map.Entry<String, Integer> entry : weights.entrySet()) {
            for (char c : entry.getKey().toCharArray()) {
                if (entry.getValue() == 0) {
                    continue;
                }
                try {
                    current = StrictMath.addExact(current, entry.getValue());
                }
                catch (ArithmeticException e) {
                    throw new IllegalArgumentException("weight exceeds capability of randomiser", e);
                }
                compiled.put(current, c);
            }
        }
        return compiled;
    }

    private static String summarise(Map<Integer, Character> weights) {
        Set<Character> compiled = new TreeSet<>();
        weights.forEach((i, c) -> compiled.add(c));
        return compiled.stream().map(String::valueOf).collect(Collectors.joining());
    }

    private static int total(Map<Integer, Character> weights) {
        return weights.keySet().stream().mapToInt(Integer::intValue).max().orElse(0);
    }

    /**
     * Initialises the randomiser with a given random input stream.
     *
     * @param weights the weight map
     * @param randomStream the random stream for generating data
     * @throws NullPointerException
     *         if the argument {@code randomStream} is {@code null}
     */
    public WeightedRandomiser(Map<String, Integer> weights, RandomInputStream randomStream) {
        super(randomStream);
        this.weights = WeightedRandomiser.compile(weights);
        this.summary = WeightedRandomiser.summarise(this.weights);
        this.total = WeightedRandomiser.total(this.weights);

    }

    private final Map<Integer, Character> weights;
    private final String                  summary;
    private final int                     total;

    @Override
    public boolean equals(Object object) {
        return super.equals(object);
    }

    @Override
    public int hashCode() {
        return super.hashCode() ^ this.weights.hashCode();
    }

    /**
     * <p>
     * Generates a byte encoded string with {@code length} amount of bytes.
     * </p>
     * <p>
     * This method is implemented as follow:
     * </p>
     * <code>
     * return this.generateString(length).getBytes(StandardCharsets.UTF_8);
     * </code>
     *
     * @param length the length of the generated string
     * @return the bytes representation of the generated string
     */
    @Override
    public byte[] generate(int length) {
        return this.generateString(length).getBytes(StandardCharsets.UTF_8);
    }

    /**
     * Generates a string with {@code length} amount of random bytes.
     *
     * @param length the length of the generated string
     * @return the generated string
     */
    public String generateString(int length) {
        StringBuilder string = new StringBuilder();
        for (int i = 0; i < length; i++) {
            string.append(this.getCharacter(this.getPointer()));
        }
        return string.toString();
    }

    private char getCharacter(int pointer) {
        for (Map.Entry<Integer, Character> entry : this.weights.entrySet()) {
            if (entry.getKey() > pointer) {
                return entry.getValue();
            }
        }
        throw new IllegalArgumentException("pointer missed: " + pointer);
    }

    private int getPointer() {
        double d = (ByteBuffer.wrap(super.generate(8)).getLong() >>> 11) / (double) (1l << 53);
        return (int) StrictMath.floor(d * this.total);
    }

    @Override
    public String toString() {
        return String.format("rst/WeightedRandomiser:%s#%d$%s", this.summary, this.total, this.getRandomStream());
    }

}
